/*
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2009 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org

    This file written by Ryan C. Gordon (icculus@icculus.org)
*/
#include "SDL_config.h"

/* Output audio to nowhere... */

#include "SDL_rwops.h"
#include "SDL_timer.h"
#include "SDL_audio.h"
#include "../SDL_audiomem.h"
#include "../SDL_audio_c.h"
#include "../SDL_audiodev_c.h"
#include "SDL_androidaudio.h"
#include "SDL_mutex.h"
#include "SDL_thread.h"
#include <jni.h>
#include <android/log.h>

#define ANDROIDAUD_DRIVER_NAME         "android"

/* Audio driver functions */
static int ANDROIDAUD_OpenAudio(_THIS, SDL_AudioSpec *spec);
static void ANDROIDAUD_WaitAudio(_THIS);
static void ANDROIDAUD_PlayAudio(_THIS);
static Uint8 *ANDROIDAUD_GetAudioBuf(_THIS);
static void ANDROIDAUD_CloseAudio(_THIS);

static JNIEnv *sandroid_env;
static jclass sandroid_caller;
static jobject sandroid_callback;
static jmethodID android_sendaudio;
static jmethodID android_initaudio;
static JavaVM *jvm;
int sinit;

/* Audio driver bootstrap functions */
static int ANDROIDAUD_Available(void)
{
	return(1);
}

static void ANDROIDAUD_DeleteDevice(SDL_AudioDevice *device)
{
	SDL_free(device->hidden);
	SDL_free(device);
}

static SDL_AudioDevice *ANDROIDAUD_CreateDevice(int devindex)
{
	SDL_AudioDevice *this;

	/* Initialize all variables that we clean on shutdown */
	this = (SDL_AudioDevice *)SDL_malloc(sizeof(SDL_AudioDevice));
	if ( this ) {
		SDL_memset(this, 0, (sizeof *this));
		this->hidden = (struct SDL_PrivateAudioData *)
				SDL_malloc((sizeof *this->hidden));
	}
	if ( (this == NULL) || (this->hidden == NULL) ) {
		SDL_OutOfMemory();
		if ( this ) {
			SDL_free(this);
		}
		return(0);
	}
	SDL_memset(this->hidden, 0, (sizeof *this->hidden));

	/* Set the function pointers */
	this->OpenAudio = ANDROIDAUD_OpenAudio;
	this->WaitAudio = ANDROIDAUD_WaitAudio;
	this->PlayAudio = ANDROIDAUD_PlayAudio;
	this->GetAudioBuf = ANDROIDAUD_GetAudioBuf;
	this->CloseAudio = ANDROIDAUD_CloseAudio;

	this->free = ANDROIDAUD_DeleteDevice;

	return this;
}

AudioBootStrap ANDROIDAUD_bootstrap = {
	ANDROIDAUD_DRIVER_NAME, "SDL Android audio driver",
	ANDROIDAUD_Available, ANDROIDAUD_CreateDevice
};


static jbyteArray audioarray = NULL;
static JNIEnv * jniEnv = NULL;

static Uint8 *ANDROIDAUD_GetAudioBuf(_THIS)
{
	return(this->hidden->mixbuf);
}

static void ANDROIDAUD_CloseAudio(_THIS)
{
	
	if ( this->hidden->mixbuf != NULL ) {
		SDL_FreeAudioMem(this->hidden->mixbuf);
		this->hidden->mixbuf = NULL;
	}
	
}

static int ANDROIDAUD_OpenAudio(_THIS, SDL_AudioSpec *spec)
{
	__android_log_print(ANDROID_LOG_INFO, "libSDL", "openAudio");
	if( ! (spec->format == AUDIO_S8 || spec->format == AUDIO_S16) )
		return (-1); // TODO: enable format conversion? Don't know how to do that in SDL
	
	if (!sinit)
	{
	(*jvm)->GetEnv(jvm, (void **)&sandroid_env, NULL);
	(*jvm)->AttachCurrentThread(jvm, (void **)&sandroid_env, NULL);
	android_sendaudio = (*sandroid_env)->GetMethodID(sandroid_env, sandroid_caller, "sendAudio", "([BI)I");
	android_initaudio = (*sandroid_env)->GetMethodID(sandroid_env, sandroid_caller, "initAudio", "(II)V");
	sinit = 1;
	}


	SDL_CalculateAudioSpec(spec);

	__android_log_print(ANDROID_LOG_INFO, "libSDL", "openAudio. register done");
	
	this->hidden->mixlen = spec->size;
	this->hidden->mixbuf = (Uint8 *) SDL_AllocAudioMem(this->hidden->mixlen);
	if ( this->hidden->mixbuf == NULL ) {
		return(-1);
	}
	SDL_memset(this->hidden->mixbuf, spec->silence, spec->size);

	(*sandroid_env)->CallVoidMethod(sandroid_env, sandroid_callback, android_initaudio, 22050, (spec->format == AUDIO_S8)?8:16);

	audioarray = (*sandroid_env)->NewByteArray(sandroid_env, 16*this->hidden->mixlen);
	
	__android_log_print(ANDROID_LOG_INFO, "libSDL", "endOpenAudio. mixlen: %d", this->hidden->mixlen);
	/* We're ready to rock and roll. :-) */
	return(0);
}

static void ANDROIDAUD_WaitAudio(_THIS)
{
	SDL_Delay(150);
}

static void ANDROIDAUD_PlayAudio(_THIS)
{
	__android_log_print(ANDROID_LOG_INFO, "libSDL", ">>>pA");
	(*sandroid_env)->SetShortArrayRegion(sandroid_env, audioarray, 0, this->hidden->mixlen, this->hidden->mixbuf);
	jint result = (*sandroid_env)->CallIntMethod(sandroid_env, sandroid_callback, android_sendaudio, audioarray, this->hidden->mixlen);

	if ( (Uint32)result != this->hidden->mixlen ) {
		this->enabled = 0;
	}
	__android_log_print(ANDROID_LOG_INFO, "libSDL", "<<<pA");
}

#ifndef SDL_JAVA_PACKAGE_PATH
#error You have to define SDL_JAVA_PACKAGE_PATH to your package path with dots replaced with underscores, for example "com_example_SanAngeles"
#endif
#define JAVA_EXPORT_NAME2(name,package) Java_##package##_##name
#define JAVA_EXPORT_NAME1(name,package) JAVA_EXPORT_NAME2(name,package)
#define JAVA_EXPORT_NAME(name) JAVA_EXPORT_NAME1(name,SDL_JAVA_PACKAGE_PATH)

extern void JAVA_EXPORT_NAME(DemoActivity_nativeAudioInit) (JNIEnv * env,jobject  thiz, jobject callback)
{
	__android_log_print(ANDROID_LOG_INFO, "libSDL", "startAudioRegister");
	sandroid_callback = callback;
	sandroid_caller = (*env)->GetObjectClass(env, callback);

	(*env)->GetJavaVM(env, &jvm);
	__android_log_print(ANDROID_LOG_INFO, "libSDL", "endAudioRegister");
};


